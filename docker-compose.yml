version: '3.8'

#TODO: вынести все в .env
#TODO: выпилить маппинг ненужных портов
#TODO: переименовать postgres_data
services:
  # coworking-web:
  #   build: source/web/typescript
  #   depends_on:
  #     - coworking-servers-configurator
  #     - coworking-database-reader
  #   environment:
  #     SERVICE_NAME: coworking-web
  #   ports:
  #     - 80:5173
  #   networks:
  #     - coworking-network
  #   restart: always

  coworking-database-reader:
    build: 'source/database_reader/python'
    depends_on:
      - coworking-database
      - coworking-file-storage
    environment:
      SERVICE_NAME: coworking-database-reader
      API_V1_STR: '/api/v1'
      HOST: '0.0.0.0'
      PORT: 80
      FILE_STORAGE_HOST: coworking-file-storage
      FILE_STORAGE_PORT: 9000
      FILE_STORAGE_ACCESS_KEY: minioadmin
      FILE_STORAGE_SECRET_KEY: minioadmin
      FILE_STORAGE_BUCKET_NAME: coworking
      DATABASE_USER: postgres
      DATABASE_PASSWORD: 1234
      DATABASE_HOST: coworking-database
      DATABASE_PORT: 5432
      DATABASE_NAME: coworking
      JWT_SECRET_KEY: uweyfeiuwyft
      JWT_REFRESH_SECRET_KEY: qwoerqyhowirhq
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_MINUTES: 10080
      PASSWORD_HASHING_ITERATIONS: 100000
      REDIS_HOST: coworking-redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 0
    ports:
      - '8001:80'
    networks:
      - coworking-network
    restart: always

  coworking-servers-configurator:
    build: 'source/servers_configurator/python'
    depends_on:
      - coworking-kafka
      - coworking-database-configurator
      - coworking-file-storage
    environment:
      SERVICE_NAME: coworking-service-configurator
      API_V1_STR: '/api/v1'
      HOST: '0.0.0.0'
      PORT: 80
      KAFKA_HOST: coworking-kafka
      KAFKA_PORT: 9092
      KAFKA_DATABASE_TOPIC: coworking_database_topic
      KAFKA_INITIAL_TIMEOUT: 20
      KAFKA_RETRY_TIMEOUT: 10
      FILE_STORAGE_HOST: coworking-file-storage
      FILE_STORAGE_PORT: 9000
      FILE_STORAGE_ACCESS_KEY: minioadmin
      FILE_STORAGE_SECRET_KEY: minioadmin
      FILE_STORAGE_BUCKET_NAME: coworking
      JWT_SECRET_KEY: uweyfeiuwyft
    ports:
      - '8000:80'
    networks:
      - coworking-network
    restart: always

  coworking-database-configurator:
    build: 'source/database_configurator/python'
    depends_on:
      - coworking-kafka
      - coworking-database
    environment:
      SERVICE_NAME: coworking-database-configurator
      KAFKA_HOST: coworking-kafka
      KAFKA_PORT: 9092
      KAFKA_DATABASE_TOPIC: coworking_database_topic
      KAFKA_DATABASE_GROUP_ID: coworking-postgres-group
      KAFKA_AUTO_OFFSET_RESET: earliest
      KAFKA_ENABLE_AUTO_COMMIT: 1
      KAFKA_INITIAL_TIMEOUT: 20
      DATABASE_USER: postgres
      DATABASE_PASSWORD: 1234
      DATABASE_HOST: coworking-database
      DATABASE_PORT: 5432
      DATABASE_NAME: coworking
    networks:
      - coworking-network
    restart: always

  coworking-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - coworking-zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: coworking-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://coworking-kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO'
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'ERROR'
    ports:
      - '9092:9092'
    networks:
      - coworking-network
    restart: always
    logging:
      driver: 'none'

  coworking-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - coworking-network
    restart: always
    logging:
      driver: 'none'

  coworking-database:
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./source/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - coworking-network
    restart: always

  coworking-file-storage:
    image: minio/minio
    volumes:
      - file_storage_data:/data
    ports:
      - '9000:9000'
    command: server /data
    networks:
      - coworking-network
    restart: always

  coworking-redis:
    image: redis:latest
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
    networks:
      - coworking-network
    restart: always

volumes:
  postgres_data:
  file_storage_data:
  redis_data:

networks:
  coworking-network:
    driver: bridge
